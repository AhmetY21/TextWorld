@@grammar :: TextGrammar

@@whitespace :: ?"[\t]+"

@@eol_comments :: ?"^(//.*|\s*)\n?"

tag = ?"[\w()/!<>-\s,]+" ;

given = ?"([^;|{}\n\[\]#])+" ;

expression = ?"([^;|{}\[\]\n])+" ;

statement = ?"([^;|\[\]{}\n<>])+" ;

literal = ?'(([^;|"<>\n\[\]()#{}]|\([^()]*\))+)?' ;

literalAlternative::Literal = value:literal ;

terminalSymbol::TerminalSymbol = ('"' literal:literal '"' | literal:literal);

nonterminalSymbol::NonterminalSymbol = "#" symbol:tag "#" ;

evalSymbol::EvalSymbol = statement:statement ;

(* conditionalSymbol::ConditionalSymbol = expression:(nonterminalSymbol | evalSymbol) ["|" given:given] ; *)

conditionalSymbol::ConditionalSymbol = expression:(nonterminalSymbol | evalSymbol) [?"\s*\|\s*" given:given] ;

(* specialSymbol::SpecialSymbol = "{" statement:(listSymbol | conditionalSymbol) "}" ; *)

specialSymbol::SpecialSymbol = "{" statement:conditionalSymbol "}" ;

(* listSymbol::ListSymbol = "[" conditional:conditionalSymbol "]" ; *)

listSymbol::ListSymbol = "[" symbol:specialSymbol "]" ;

pythonSymbol::PythonSymbol = "<" statement:statement ">" ;

symbol = listSymbol | pythonSymbol | specialSymbol | nonterminalSymbol | terminalSymbol;

adjectiveNoun::AdjectiveNoun = adjective:literal "|" noun:literal ;

entity = adjectiveNoun | literalAlternative ;

match::Match = lhs:entity "<->" rhs:entity ;

string::String = symbols:{symbol}+ ;

alternatives = ";".{string}+ ;

productionRule::ProductionRule = symbol:tag ":" alternatives:alternatives ("\n" | $) ;

grammar::TextGrammar = rules:{productionRule}* $ ;

start = grammar ;

onlyString = @:string $ ;
